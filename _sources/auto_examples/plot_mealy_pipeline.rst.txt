
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mealy_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mealy_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mealy_pipeline.py:


Model Error Analysis with scikit-learn Pipeline for the Adult income dataset
============================================================================

Here we train a RandomForestClassifier to predict whether a person gains
more or less than 50k per year. This is our primary model.
Before training the primary model we preprocess the categorical and numeric
features of the dataset by means of a scikit-learn Pipeline.
Then we build a secondary model, called Error Tree,
to predict on what samples the primary model returns wrong or correct predictions.
The Error Tree is a DecisionTree returning a binary outcome success/failure. The leaves
yielding failure outcome gather the samples mis-predicted by the primary
model. Plotting the feature distributions of these samples and comparing
to the whole data highlights the subpopulations where the model works poorly.

.. GENERATED FROM PYTHON SOURCE LINES 19-20

When using a python notebook, set ``%matplotlib inline`` to enable display.

.. GENERATED FROM PYTHON SOURCE LINES 23-24

Those are the necessary imports and initializations.

.. GENERATED FROM PYTHON SOURCE LINES 24-47

.. code-block:: python3


    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import StandardScaler, OneHotEncoder
    from sklearn.impute import SimpleImputer
    from sklearn.pipeline import Pipeline

    import pandas as pd
    import numpy as np
    import random

    import matplotlib.image as mpimg
    import matplotlib.pyplot as plt

    from mealy.error_analyzer import ErrorAnalyzer
    from mealy.error_visualizer import ErrorVisualizer


    default_seed = 10
    np.random.seed(default_seed)
    random.seed(default_seed)








.. GENERATED FROM PYTHON SOURCE LINES 48-49

Load Adult income dataset.

.. GENERATED FROM PYTHON SOURCE LINES 49-75

.. code-block:: python3


    adult_income_url = 'https://www.openml.org/data/get_csv/54002/adult-census.arff'

    df = pd.read_csv(adult_income_url)

    row_id = 'ID'
    df = df.drop([row_id], axis=1)

    target = 'class'


    X = df.dropna().drop(target, axis=1)
    y = df.dropna()[target]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    numeric_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_features = df.select_dtypes(include=['object']).drop([target], axis=1).columns.tolist()

    feature_names = numeric_features + categorical_features

    print('Categorical features of the adult dataset:')
    print(categorical_features)
    print('Numeric features of the adult dataset:')
    print(numeric_features)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Categorical features of the adult dataset:
    ['workclass', 'education:', 'marital-status:', 'occupation:', 'relationship:', 'race:', 'sex:', 'native-country:']
    Numeric features of the adult dataset:
    ['age', 'fnlwgt:', 'education-num:', 'capital-gain:', 'capital-loss:', 'hours-per-week:']




.. GENERATED FROM PYTHON SOURCE LINES 76-81

Build the preprocessing Pipeline.
#############################################################################
 The final Pipeline should contain a `sklearn.compose.ColumnTransformer` as a
 preprocessor and any `sklearn.base.BaseEstimator` as the primary model to
 investigate.

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: python3


    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())])
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))])

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)])

    model = Pipeline(steps=[('preprocessor', preprocessor),
                            ('classifier', RandomForestClassifier(n_estimators=10))])








.. GENERATED FROM PYTHON SOURCE LINES 98-99

Train preprocessing Pipeline and RandomForestClassifier.

.. GENERATED FROM PYTHON SOURCE LINES 99-105

.. code-block:: python3


    model.fit(X_train, y_train)

    acc_score = model.score(X_test, y_test)
    print("Acc = %.2f" % acc_score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Acc = 0.85




.. GENERATED FROM PYTHON SOURCE LINES 106-107

Fit an Error Tree on the model performances.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: python3


    error_analyzer = ErrorAnalyzer(model, feature_names=feature_names)
    error_analyzer.fit(X_test, y_test)








.. GENERATED FROM PYTHON SOURCE LINES 112-113

Print metrics regarding the Error Tree.

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: python3


    print(error_analyzer.evaluate(X_test, y_test, output_format='str'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The Error Decision Tree was trained with accuracy 84.85% and balanced accuracy 51.29%.
    The Decision Tree estimated the primary models accuracy to 99.16%.
    The true accuracy of the primary model is 84.77.%
    The Fidelity of the error tree is 85.61%.
    Warning: the built tree might not be representative of the primary model performances.
    The error tree predicted model accuracy is considered too different from the true model accuracy.





.. GENERATED FROM PYTHON SOURCE LINES 117-118

Plot the Error Tree.

.. GENERATED FROM PYTHON SOURCE LINES 118-132

.. code-block:: python3


    error_visualizer = ErrorVisualizer(error_analyzer)
    tree_src = error_visualizer.plot_error_tree()

    # the output of ``plot_error_tree`` is rendered automatically in a python notebook with sliders
    # the following is for rendering in this sphinx gallery
    tree_src.format = 'png'
    tree_src.render('tree')
    tree_img = mpimg.imread('tree.png')

    plt.figure(figsize=(20, 20))
    plt.imshow(tree_img)
    plt.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_mealy_pipeline_001.png
    :alt: plot mealy pipeline
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-134

Print the details regarding the decision tree nodes containing the majority of errors.

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: python3


    error_analyzer.get_error_leaf_summary(leaf_selector=None, add_path_to_leaves=True);








.. GENERATED FROM PYTHON SOURCE LINES 138-140

Plot the feature distributions of samples in the leaf containing the majority of errors.
Rank features by correlation to error.

.. GENERATED FROM PYTHON SOURCE LINES 140-143

.. code-block:: python3

    leaf_id = error_analyzer._get_ranked_leaf_ids()[0]
    error_visualizer.plot_feature_distributions_on_leaves(leaf_selector=leaf_id, top_k_features=3)




.. image:: /auto_examples/images/sphx_glr_plot_mealy_pipeline_002.png
    :alt: Distribution of age in leaf 107
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Leaf 107 (Wrong prediction: 0.347, Correct prediction: 0.653)




.. GENERATED FROM PYTHON SOURCE LINES 144-170

Discussion
----------

Error Tree Metrics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We are dealing with a binary classification task.
Here the primary predictions of "income less or more than 50k" have been categorized
in two classes: 'Correct prediction' and 'Wrong prediction' according to the difference
from the true class. The accuracy is then the number of Correct predictions over the total.
The Error Tree might not be representative of the behavior of the primary model as the true primary
accuracy and the one estimated by the Error Tree are not close.

Model Failures
^^^^^^^^^^^^^^

Let's focus on the nodes of the Error Tree, in particular the leaves
of class 'Wrong prediction'. These leaves contain the majority of errors, each
leaf clustering a subpopulation of errors with different feature values. The largest
and purest failure nodes are highlighted when printing the error node summary, and
also when plotting the feature distributions in the node (``leaf_selector=None``).
From the feature distributions, sorted by correlation with the error, we can see that
the majority of problems occur for married people.
In the next iteration of model design, the primary model needs to be improved for these
subpopulations.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.840 seconds)


.. _sphx_glr_download_auto_examples_plot_mealy_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mealy_pipeline.py <plot_mealy_pipeline.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mealy_pipeline.ipynb <plot_mealy_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
