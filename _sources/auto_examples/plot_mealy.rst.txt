.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_mealy.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mealy.py:


Model Error Analysis for the Boston houses dataset
===================================================================

Here we train a RandomForestRegressor to predict the price of the houses
in Boston. This is our primary model. Then we build a secondary model,
called Model Performance Predictor (MPP), to predict on what samples
the primary model returns wrong or correct predictions. The MPP is a
DecisionTree returning a binary outcome success/failure. The leaf nodes
yielding failure outcome gather the samples mis-predicted by the primary
model. Plotting the feature distributions of these samples and comparing
to the whole data highlights the subpopulations where the model works poorly.

When using a python notebook, set ``%matplotlib inline`` to enable display.

Those are the necessary imports and initializations.


.. code-block:: python3


    from sklearn.datasets import load_boston
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestRegressor

    import numpy as np
    import random

    import matplotlib.image as mpimg
    import matplotlib.pyplot as plt

    from mealy.error_analyzer import ErrorAnalyzer
    from mealy.error_visualizer import ErrorVisualizer


    default_seed = 10
    np.random.seed(default_seed)
    random.seed(default_seed)








Load Boston houses dataset.


.. code-block:: python3


    dataset = load_boston()
    X = dataset.data
    y = dataset.target
    feature_names = dataset.feature_names

    X_train, X_test, y_train, y_test = train_test_split(X, y)








Train a RandomForestRegressor.


.. code-block:: python3


    model = RandomForestRegressor()
    model.fit(X_train, y_train)

    r2_score = model.score(X_test, y_test)
    print("R2 = %.2f" % r2_score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    R2 = 0.87




Fit a Model Performance Predictor on the model performances.


.. code-block:: python3


    error_analyzer = ErrorAnalyzer(model, feature_names=feature_names)
    error_analyzer.fit(X_test, y_test)








Print metrics regarding the Model Performance Predictor.


.. code-block:: python3


    print(error_analyzer.mpp_summary(X_test, y_test, output_dict=False))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The MPP was trained with accuracy 92.91% and balanced accuracy 80.65%.
    The Decision Tree estimated the primary models accuracy to 88.98%.
    The true accuracy of the primary model is 85.04.%
    The Fidelity of the MPP is 96.06%.
    The MPP is considered representative of the primary model performances.





Plot the Model Performance Predictor Decision Tree.


.. code-block:: python3


    error_visualizer = ErrorVisualizer(error_analyzer)
    tree_src = error_visualizer.plot_error_tree()

    # the output of ``plot_error_tree`` is rendered automatically in a python notebook
    # the following is for rendering in this sphinx gallery
    tree_src.format = 'png'
    tree_src.render('tree')
    tree_img = mpimg.imread('tree.png')

    plt.figure(figsize=(20, 20))
    plt.imshow(tree_img)
    plt.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_mealy_001.png
    :class: sphx-glr-single-img





Print the details regarding the decision tree nodes containing the majority of errors.


.. code-block:: python3


    error_analyzer.error_node_summary(leaf_selector="all_errors", add_path_to_leaves=True, print_summary=True);





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LEAF 7:
         Correct predictions: 2 | Wrong predictions: 12 | Local error (purity): 0.86 | Global error: 0.63
         Path to leaf:
         AGE > 82.15
            LSTAT <= 8.96




Plot the feature distributions of samples in the leaf containing the majority of errors.
Rank features by correlation to error.


.. code-block:: python3

    leaf_id = error_analyzer.get_ranked_leaf_ids('all_errors')[0]
    error_visualizer.plot_feature_distributions_on_leaves(leaf_selector=leaf_id, top_k_features=3)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_mealy_002.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_mealy_003.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_mealy_004.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Leaf 7 (Wrong prediction: 0.857, Correct prediction: 0.143)




Discussion
----------

Model Performance Predictor Metrics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We are dealing with a regression task, but the metrics highlight the accuracy
of the primary model and its estimate given by the Model Performance Predictor.
Here the primary predictions of price have been categorized in two classes:
'Correct prediction' and 'Wrong prediction' by thresholding the deviation of
the prediction from the true value. Close enough predictions are Correct prediction,
the others are Wrong prediction. For more details, have a look at the documentation.
The accuracy is then the number of Correct predictions over the total.
The MPP is representative of the behavior of the primary model as the true primary
accuracy and the one estimated by the MPP are close.

Model Failures
^^^^^^^^^^^^^^

Let's focus on the nodes of the MPP DecisionTree, in particular the leaf nodes
of class 'Wrong prediction'. These leaves contain the majority of errors, each
leaf clustering a subpopulation of errors with different feature values. The largest
and purest failure nodes are highlighted when printing the error node summary, and
also when plotting the feature distributions in the node (``leaf_selector="all_errors"``).
From the feature distributions, sorted by correlation with the error, we can see that
the majority of problems occur for extreme values of features ``LSTAT`` and ``AGE``.
In the next iteration of model design, the primary model needs to be improved for these
subpopulations.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.900 seconds)

**Estimated memory usage:**  177 MB


.. _sphx_glr_download_auto_examples_plot_mealy.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_mealy.py <plot_mealy.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_mealy.ipynb <plot_mealy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
