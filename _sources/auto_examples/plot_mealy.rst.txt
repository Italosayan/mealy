
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mealy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mealy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mealy.py:


Model Error Analysis for the Boston houses dataset
===================================================================

Here we train a RandomForestRegressor to predict the price of the houses
in Boston. This is our primary model. Then we build a secondary model,
called Error Tree, to predict on what samples
the primary model returns wrong or correct predictions. The Error tree is a
DecisionTree returning a binary outcome success/failure. The leaves
yielding failure outcome gather the samples mis-predicted by the primary
model. Plotting the feature distributions of these samples and comparing
to the whole data highlights the subpopulations where the model works poorly.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

When using a python notebook, set ``%matplotlib inline`` to enable display.

.. GENERATED FROM PYTHON SOURCE LINES 21-22

Those are the necessary imports and initializations.

.. GENERATED FROM PYTHON SOURCE LINES 22-41

.. code-block:: python3


    from sklearn.datasets import load_boston
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestRegressor

    import numpy as np
    import random

    import matplotlib.image as mpimg
    import matplotlib.pyplot as plt

    from mealy.error_analyzer import ErrorAnalyzer
    from mealy.error_visualizer import ErrorVisualizer
    import mealy
    print(mealy.__version__)
    default_seed = 10
    np.random.seed(default_seed)
    random.seed(default_seed)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.2.4




.. GENERATED FROM PYTHON SOURCE LINES 42-43

Load Boston houses dataset.

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: python3


    dataset = load_boston()
    X = dataset.data
    y = dataset.target
    feature_names = dataset.feature_names

    X_train, X_test, y_train, y_test = train_test_split(X, y)








.. GENERATED FROM PYTHON SOURCE LINES 52-53

Train a RandomForestRegressor.

.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: python3


    model = RandomForestRegressor()
    model.fit(X_train, y_train)

    r2_score = model.score(X_test, y_test)
    print("R2 = %.2f" % r2_score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    R2 = 0.87




.. GENERATED FROM PYTHON SOURCE LINES 61-62

Fit an Error Tree on the model performances.

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: python3


    error_analyzer = ErrorAnalyzer(model, feature_names=feature_names)
    error_analyzer.fit(X_test, y_test)








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Print metrics regarding the Error Tree.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: python3


    print(error_analyzer.evaluate(X_test, y_test, output_format='str'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The Error Decision Tree was trained with accuracy 98.43% and balanced accuracy 94.74%.
    The Decision Tree estimated the primary models accuracy to 86.61%.
    The true accuracy of the primary model is 85.04.%
    The Fidelity of the error tree is 98.43%.
    The error tree is considered representative of the primary model performances.





.. GENERATED FROM PYTHON SOURCE LINES 72-73

Plot the Error Tree.

.. GENERATED FROM PYTHON SOURCE LINES 73-87

.. code-block:: python3


    error_visualizer = ErrorVisualizer(error_analyzer)
    tree_src = error_visualizer.plot_error_tree()

    # the output of ``plot_error_tree`` is rendered automatically in a python notebook
    # the following is for rendering in this sphinx gallery
    tree_src.format = 'png'
    tree_src.render('tree')
    tree_img = mpimg.imread('tree.png')

    plt.figure(figsize=(20, 20))
    plt.imshow(tree_img)
    plt.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_mealy_001.png
    :alt: plot mealy
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-89

Print the details regarding the decision tree nodes containing the majority of errors.

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: python3


    error_analyzer.get_error_leaf_summary(leaf_selector=None, add_path_to_leaves=True);








.. GENERATED FROM PYTHON SOURCE LINES 93-95

Plot the feature distributions of samples in the leaf containing the majority of errors.
Rank features by correlation to error.

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: python3

    leaf_id = error_analyzer._get_ranked_leaf_ids()[0]
    error_visualizer.plot_feature_distributions_on_leaves(leaf_selector=leaf_id, top_k_features=3)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_mealy_002.png
          :alt: Leaf 12 (Wrong prediction: 1, Correct prediction: 0), Distribution of LSTAT
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_mealy_003.png
          :alt: Leaf 12 (Wrong prediction: 1, Correct prediction: 0), Distribution of AGE
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_mealy_004.png
          :alt: Leaf 12 (Wrong prediction: 1, Correct prediction: 0), Distribution of TAX
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 99-128

Discussion
----------

Error Tree Metrics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We are dealing with a regression task, but the metrics highlight the accuracy
of the primary model and its estimate given by the Error Tree.
Here the primary predictions of price have been categorized in two classes:
'Correct prediction' and 'Wrong prediction' by thresholding the deviation of
the prediction from the true value. Close enough predictions are Correct prediction,
the others are Wrong prediction. For more details, have a look at the documentation.
The accuracy is then the number of Correct predictions over the total.
The Error Tree is representative of the behavior of the primary model as the true primary
accuracy and the one estimated by the Error Tree are close.

Model Failures
^^^^^^^^^^^^^^

Let's focus on the nodes of the Error Tree DecisionTree, in particular the leaves
of class 'Wrong prediction'. These leaves contain the majority of errors, each
leaf clustering a subpopulation of errors with different feature values. The largest
and purest failure nodes are highlighted when printing the error node summary, and
also when plotting the feature distributions in the node (``leaf_selector=None``).
From the feature distributions, sorted by correlation with the error, we can see that
the majority of problems occur for extreme values of features ``LSTAT`` and ``AGE``.
In the next iteration of model design, the primary model needs to be improved for these
subpopulations.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.588 seconds)


.. _sphx_glr_download_auto_examples_plot_mealy.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mealy.py <plot_mealy.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mealy.ipynb <plot_mealy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
